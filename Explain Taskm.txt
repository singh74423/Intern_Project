In This Task Management System  Java program that allows users to manage tasks using CRUD operations:

Create: Add new tasks to the list.
Read: View all tasks stored in the system.
Update: Modify a specific task by selecting its number.
Delete: Remove a task by selecting its number.


The program uses an ArrayList to store tasks, and a Scanner for user input. A loop continuously displays a menu until the user chooses to exit.

In This Code We Are Deviding In to 4 Pyragrapgh

1- Imports and Declarations:
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

ArrayList and List: Used to store the tasks dynamically.
Scanner: Handles user input from the console.


2- Main Method
public static void main(String[] args) {
    List<String> tasks = new ArrayList<>();
    Scanner scanner = new Scanner(System.in);
    boolean exit = false;

tasks: Stores the list of tasks.
scanner: Reads user inputs.
exit: Used to terminate the program loop when set to true.

3 - Menu Loop
while (!exit) {
    System.out.println("\nTask Management System");
    System.out.println("1. Add Task");
    System.out.println("2. View Tasks");
    System.out.println("3. Update Task");
    System.out.println("4. Delete Task");
    System.out.println("5. Exit");
    System.out.print("Select an option: ");

Displays the menu options to the user in a loop until they choose Exit (option 5).
Reads the user's choice and directs the program flow using a switch statement.


4- Menu Options

>Add Task

java
Copy code
private static void addTask(List<String> tasks, Scanner scanner) {
    System.out.print("Enter the task description: ");
    String task = scanner.nextLine();
    tasks.add(task);
    System.out.println("Task added successfully!");
}

Prompts the user to enter a task description.
Adds the input string to the tasks list.
Confirms the addition to the user.

>View Tasks

java
Copy code
private static void viewTasks(List<String> tasks) {
    if (tasks.isEmpty()) {
        System.out.println("No tasks available.");
    } else {
        System.out.println("List of Tasks:");
        for (int i = 0; i < tasks.size(); i++) {
            System.out.println((i + 1) + ". " + tasks.get(i));
        }
    }
}

Checks if the tasks list is empty.
If not, displays all tasks with their respective index (1-based).

>Update Task

java
Copy code
private static void updateTask(List<String> tasks, Scanner scanner) {
    viewTasks(tasks);
    System.out.print("Enter the task number to update: ");
    int index = scanner.nextInt() - 1;
    scanner.nextLine(); // Consume newline left-over

    if (index >= 0 && index < tasks.size()) {
        System.out.print("Enter new task description: ");
        tasks.set(index, scanner.nextLine());
        System.out.println("Task updated successfully!");
    } else {
        System.out.println("Invalid task number.");
    }
}
Displays all tasks using viewTasks.
Prompts the user for the task number they want to update.
Updates the corresponding task if the task number is valid.

>Delete Task

java
Copy code
private static void deleteTask(List<String> tasks, Scanner scanner) {
    viewTasks(tasks);
    System.out.print("Enter the task number to delete: ");
    int index = scanner.nextInt() - 1;
    scanner.nextLine(); // Consume newline left-over

    if (index >= 0 && index < tasks.size()) {
        tasks.remove(index);
        System.out.println("Task deleted successfully!");
    } else {
        System.out.println("Invalid task number.");
    }
}
Displays all tasks using viewTasks.
Prompts the user for the task number they want to delete.
Removes the corresponding task if the task number is valid.

>Exit Option

java
Copy code
case 5:
    exit = true;
    break;
Sets the exit variable to true, ending the loop and terminating the program.
